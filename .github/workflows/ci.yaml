name: modulir CI

env:
  # Paths for various manually installed utilities. Don't try to use $HOME
  # because GitHub Actions won't support it.
  MAGICK_BIN: /home/runner/imagemagick/bin/magick
  MAGICK_RELEASE: 7.1.0-56
  MOZJPEG_BIN: /opt/mozjpeg/bin/cjpeg
  PNGQUANT_BIN: /usr/bin/pngquant

on:
  pull_request:
  push:
    branches:
      - master
  schedule:
    # ever day at 8 AM
    - cron: "0 8 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: "go.mod"

      - name: Install FUSE + PNGQuant + WebP
        run: sudo apt-get install fuse pngquant webp

      # The copy of ImageMagick we could get from apt-get is ancient and
      # doesn't handle niceties like `.heic` files, so here we get a binary
      # directly. When Ubuntu is upgraded at some point in the probably-distant
      # future, we can probably get rid of this.
      - name: Install ImageMagick
        run: |
          mkdir -p $(dirname "${{ env.MAGICK_BIN }}")
          curl --compressed -L -o "${{ env.MAGICK_BIN }}" https://github.com/ImageMagick/ImageMagick/releases/download/${{ env.MAGICK_RELEASE }}/ImageMagick--clang-x86_64.AppImage
          chmod +x "${{ env.MAGICK_BIN }}"

      - name: ImageMagick format options
        run: ${{ env.MAGICK_BIN }} identify -list format

      # Uses an artifact built by: https://github.com/brandur/mozjpeg-builder
      - name: Install MozJPEG
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          curl --compressed -L -O https://github.com/brandur/mozjpeg-builder/releases/download/master/mozjpeg_amd64.deb
          sudo dpkg -i mozjpeg_amd64.deb

      - name: Debug
        run: |
          echo "github.ref=${{ github.ref }}"
          echo "go env GOPATH=$(go env GOPATH)"
          echo "pwd=$(pwd)"
          echo "GITHUB_WORKSPACE=${GITHUB_WORKSPACE}"
          echo "HOME=${HOME}"

      - name: "Go: Clean"
        run: make clean

      - name: "Go: Test"
        run: make test

      - name: "Go: Vet"
        run: make vet

      - name: "Check: Gofmt"
        run: make check-gofmt

  golangci-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 3

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          check-latest: true
          go-version-file: "go.mod"

      - name: "Check: golangci-lint"
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.0.0
